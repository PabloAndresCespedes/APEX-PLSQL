PL/SQL Developer Test script 3.0
201
-- Created on 07/02/2025 by @PabloACespedes 
declare 
  /*
    Tabla de LOG
    create table gen_monitor_log (
        id                             number generated by default on null as identity  
                                       constraint gen_monitor_log_id_pk primary key,
        rlog_oper                      varchar2(255),
        rlog_proceso                   varchar2(255),
        rlog_desc                      varchar2(255),
        rlog_fec_ini                   date,
        rlog_fec_fin                   date,
        rlog_ini_num                   number,
        rlog_fin_num                   number,
        rlog_tiempo_seg                number,
        rlog_msg                       clob
    )
    ;

    -- comments
    comment on table gen_monitor_log is 'Alojaremos informacion de monitoreo para actualizaciones devistas materializadas';
    comment on column gen_monitor_log.rlog_fec_fin is 'Fecha fin del log';
    comment on column gen_monitor_log.rlog_fec_ini is 'Fecha de inicio del log';
    comment on column gen_monitor_log.rlog_fin_num is 'utilizar dbms_utility.get_time';
    comment on column gen_monitor_log.rlog_ini_num is 'utilizar dbms_utility.get_time';
    comment on column gen_monitor_log.rlog_tiempo_seg is 'diferencia entre fin e ini dividido cien: (rlog_fin_num - rlog_ini_num)/100';
    
  */
  k_iniciar_cronometro   constant varchar2( 7 char ) := 'INICIAR';
  k_finalizar_cronometro constant varchar2( 9 char ) := 'FINALIZAR';
  k_grabar_cronometro    constant varchar2( 6 char ) := 'GRABAR';
  
  g_log_inicio                    number;
  g_log_fin                       number;
  g_log_f_inicio                  date;
  g_log_f_fin                     date;
  g_bloque                        varchar2( 400 char );
  g_msg                           clob;
  g_empty_clob                    clob;
  
  type t_tab_log is table of gen_monitor_log%rowtype;
  
  l_log t_tab_log;
  
  --^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  --== Constructor para cronometro
    procedure set_msg(
      in_msg in varchar2
    )as
    begin
       dbms_lob.append(g_msg, in_msg || '<br>');
    end set_msg;
    
    function get_msg return clob
      is
    begin
       return g_msg;
    end get_msg;
    
  --^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  --== Cronometro de tiempos de ejecucion, medimos el inicio
  --   versus el fin para luego obtener la cantidad de 
  --   segundos
    procedure pp_cronometro(
      in_bloque in varchar2 := null
    , in_opcion in varchar2
    )as
      k_mask_date constant varchar2( 21 char ) := 'dd/mm/yyyy hh24:mi:ss';
      l_idxcol    pls_integer;
      
      procedure add_log(
         in_rlog_oper       in gen_monitor_log.rlog_oper%type
      ,  in_rlog_proceso    in gen_monitor_log.rlog_proceso%type
      ,  in_rlog_desc       in gen_monitor_log.rlog_desc%type
      ,  in_rlog_fec_ini    in gen_monitor_log.rlog_fec_ini%type
      ,  in_rlog_fec_fin    in gen_monitor_log.rlog_fec_fin%type
      ,  in_rlog_ini_num    in gen_monitor_log.rlog_ini_num%type
      ,  in_rlog_fin_num    in gen_monitor_log.rlog_fin_num%type
      ,  in_rlog_tiempo_seg in gen_monitor_log.rlog_tiempo_seg%type
      ,  in_rlog_msg        in gen_monitor_log.rlog_msg%type
      ) as
        l_idxcol pls_integer;
      begin
        l_log.extend;
        l_idxcol := l_log.count;
        
        l_log( l_idxcol ).rlog_oper       := in_rlog_oper;
        l_log( l_idxcol ).rlog_proceso    := in_rlog_proceso;
        l_log( l_idxcol ).rlog_desc       := in_rlog_desc;
        l_log( l_idxcol ).rlog_fec_ini    := in_rlog_fec_ini;
        l_log( l_idxcol ).rlog_fec_fin    := in_rlog_fec_fin;
        l_log( l_idxcol ).rlog_ini_num    := in_rlog_ini_num;
        l_log( l_idxcol ).rlog_fin_num    := in_rlog_fin_num;
        l_log( l_idxcol ).rlog_tiempo_seg := in_rlog_tiempo_seg;
        l_log( l_idxcol ).rlog_msg        := in_rlog_msg;
        
      end add_log;
  
    begin
      
      <<c_opcion_cronometro>>
      case
        when in_opcion = k_iniciar_cronometro   then
          --== vaciar el clob antes
          g_msg    := g_empty_clob;
          g_bloque := in_bloque   ;
          
          set_msg('<hr>');
          set_msg(in_bloque);
          g_log_inicio   := dbms_utility.get_time;
          g_log_f_inicio := sysdate;
          set_msg('Inicio: '|| to_char( g_log_f_inicio, k_mask_date));
          
        when in_opcion = k_finalizar_cronometro then
          g_log_fin    := dbms_utility.get_time;
          g_log_f_fin  := sysdate              ;
          set_msg('Fin: '   || to_char(g_log_f_fin, k_mask_date)                   );
          set_msg('Lapso: ' || round( (g_log_fin - g_log_inicio)/100, 2 ) ||' seg' );
  
      else
        --== k_grabar_cronometro
        add_log(
           in_rlog_oper       => 'ADCS'
        ,  in_rlog_proceso    => 'TEST_CRONOMETRO'
        ,  in_rlog_desc       => g_bloque
        ,  in_rlog_fec_ini    => g_log_f_inicio
        ,  in_rlog_fec_fin    => g_log_f_fin
        ,  in_rlog_ini_num    => g_log_inicio
        ,  in_rlog_fin_num    => g_log_fin
        ,  in_rlog_tiempo_seg => round( (g_log_fin - g_log_inicio)/100, 2 )
        ,  in_rlog_msg        => get_msg  
        ); 
      end case c_opcion_cronometro;
    end pp_cronometro;
    
    procedure pp_save_log
      as
    begin
      <<f_save>>
      for i in 1 .. l_log.count loop
        insert into gen_monitor_log(rlog_oper
                                   ,rlog_proceso
                                   ,rlog_desc
                                   ,rlog_fec_ini
                                   ,rlog_fec_fin
                                   ,rlog_ini_num
                                   ,rlog_fin_num
                                   ,rlog_tiempo_seg
                                   ,rlog_msg
                                   )
        values(
          l_log(i).rlog_oper
        , l_log(i).rlog_proceso
        , l_log(i).rlog_desc
        , l_log(i).rlog_fec_ini
        , l_log(i).rlog_fec_fin
        , l_log(i).rlog_ini_num
        , l_log(i).rlog_fin_num
        , l_log(i).rlog_tiempo_seg
        , l_log(i).rlog_msg
        );
      end loop f_save;
    end pp_save_log;
  --^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
begin
  dbms_lob.createtemporary(g_msg       , true);
  dbms_lob.createtemporary(g_empty_clob, true);
  
  l_log := t_tab_log();
  
  <<bloq_uno>>
  begin
    pp_cronometro(in_bloque => 'bloq_uno', in_opcion => k_iniciar_cronometro);
    dbms_lock.sleep(seconds => 2);
    pp_cronometro(in_opcion => k_finalizar_cronometro);
    pp_cronometro(in_opcion => k_grabar_cronometro   );
  end bloq_uno;
  
  <<bloq_dos>>
  begin
    pp_cronometro(in_bloque => 'bloq_dos', in_opcion => k_iniciar_cronometro);
    dbms_lock.sleep(seconds => 7.12);
    pp_cronometro(in_opcion => k_finalizar_cronometro);
    pp_cronometro(in_opcion => k_grabar_cronometro   );
  end bloq_dos;
  
  <<bloq_tres>>
  begin
    pp_cronometro(in_bloque => 'bloq_tres', in_opcion => k_iniciar_cronometro);
    dbms_lock.sleep(seconds => 2);
    pp_cronometro(in_opcion => k_finalizar_cronometro);
    pp_cronometro(in_opcion => k_grabar_cronometro   );
  end bloq_tres;
  
  pp_save_log;
  
  print( get_msg );
    
  dbms_lob.freetemporary(g_msg);
  dbms_lob.freetemporary(g_empty_clob);
end;
0
0
